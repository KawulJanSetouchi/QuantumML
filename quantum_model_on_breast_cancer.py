# -*- coding: utf-8 -*-
"""Quantum Model on Breast Cancer

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aXup-eCSc5_q82TcbMfEWjoUJ3TyEVex
"""

import pandas as pd



breast_cancer_dataset = pd.read_csv("./data.csv")

breast_cancer_dataset.head()

breast_cancer_dataset.tail()

breast_cancer_dataset.sample(10)

breast_cancer_dataset.shape

breast_cancer_dataset.dtypes

breast_cancer_dataset.info()

breast_cancer_dataset.describe()

breast_cancer_dataset.isnull().sum()

breast_cancer_dataset['diagnosis'] = breast_cancer_dataset['diagnosis'].replace(['B', 'M'], [0, 1])

breast_cancer_dataset.head()

breast_cancer_dataset = breast_cancer_dataset.drop(['id', 'Unnamed: 32'], axis=1)

breast_cancer_dataset.head()

breast_cancer_dataset.shape

breast_cancer_dataset.info()

# Mencari tahu apakah dataset berisi nilai nol
breast_cancer_dataset.describe()

breast_cancer_dataset.columns

breast_cancer_dataset.head()

diagnosis_col = breast_cancer_dataset.pop('diagnosis')
breast_cancer_dataset.insert(30, 'diagnosis', diagnosis_col)

breast_cancer_dataset.head()

import matplotlib.pyplot as plt
import seaborn as sns

!pip install qiskit
from sklearn.model_selection import train_test_split
from qiskit.utils import algorithm_globals



# outcome count plot
f, ax = plt.subplots(1, 2, figsize=(10, 5))
# Pie chart
breast_cancer_dataset['diagnosis'].value_counts().plot.pie(
    explode=[0, 0.1],
    autopct='%1.1f%%',
    ax=ax[0],
    shadow=True
)
ax[0].set_title('diagnosis')
ax[0].set_ylabel('')
# Count plot
sns.countplot(x='diagnosis', data=breast_cancer_dataset, ax=ax[1])
ax[1].set_title('diagnosis')
N, P = breast_cancer_dataset['diagnosis'].value_counts()
print('Negative (0): ', N)
print('Positive (1): ', P)
plt.grid()
plt.show()

breast_cancer_dataset.hist(bins=10,figsize=(10,10))
plt.show()

#Scatter plot matrix
from pandas.plotting import scatter_matrix
scatter_matrix(breast_cancer_dataset, figsize = (20, 20));

# Pairplot
sns.pairplot(data = breast_cancer_dataset, hue = 'diagnosis')
plt.show()

import seaborn as sns
#get correlations of each features in dataset
corrmat = breast_cancer_dataset.corr()
top_corr_features = corrmat.index
plt.figure(figsize=(10,10))
#plot heat map
g=sns.heatmap(breast_cancer_dataset[top_corr_features].corr(),annot=True,cmap='RdYlGn')

target_name = 'diagnosis'
labels_dataset = breast_cancer_dataset[target_name]
features_dataset = breast_cancer_dataset.drop(target_name, axis=1)

print("Features =\n", features_dataset)
print("labels =\n", labels_dataset)

features_dataset.head()

labels_dataset.head()

from sklearn.preprocessing import MinMaxScaler

features_dataset = MinMaxScaler().fit_transform(features_dataset)

print("Features =\n", features_dataset)
print("labels =\n", labels_dataset)

from sklearn.model_selection import train_test_split
from qiskit.utils import algorithm_globals

train_features, test_features, train_labels, test_labels = train_test_split(
    features_dataset, labels_dataset, train_size=0.8, random_state=123)

from sklearn.svm import SVC

svc = SVC()
_ = svc.fit(train_features, train_labels)  # suppress printing the return value

train_score_c4 = svc.score(train_features, train_labels)
test_score_c4 = svc.score(test_features, test_labels)

print(f"Classical SVC on the training dataset: {train_score_c4:.2f}")
print(f"Classical SVC on the test dataset:     {test_score_c4:.2f}")

from qiskit.circuit.library import ZZFeatureMap

num_features = features_dataset.shape[1]

feature_map = ZZFeatureMap(feature_dimension=num_features, reps=1)
feature_map.decompose().draw(output="text")

from qiskit.circuit.library import RealAmplitudes

ansatz = RealAmplitudes(num_qubits=num_features, reps=3)
ansatz.decompose().draw(output="text")

from qiskit.algorithms.optimizers import COBYLA

optimizer = COBYLA(maxiter=100)

from qiskit.primitives import Sampler

sampler = Sampler()

from matplotlib import pyplot as plt
from IPython.display import clear_output

objective_func_vals = []
plt.rcParams["figure.figsize"] = (12, 6)


def callback_graph(weights, obj_func_eval):
    clear_output(wait=True)
    objective_func_vals.append(obj_func_eval)
    plt.title("Objective function value against iteration")
    plt.xlabel("Iteration")
    plt.ylabel("Objective function value")
    plt.plot(range(len(objective_func_vals)), objective_func_vals)
    plt.show()

!pip install qiskit-machine-learning

import time
import numpy as np
from qiskit_machine_learning.algorithms.classifiers import VQC

vqc = VQC(
    sampler=sampler,
    feature_map=feature_map,
    ansatz=ansatz,
    optimizer=optimizer,
    callback=callback_graph,
)

# clear objective value history
objective_func_vals = []

# Convert pandas Series to numpy arrays
train_features = np.array(train_features)
train_labels = np.array(train_labels)

start = time.time()
vqc.fit(train_features, train_labels)
elapsed = time.time() - start

print(f"Training time: {round(elapsed)} seconds")

